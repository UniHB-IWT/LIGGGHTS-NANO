//#**************************************************************
//#
//# filename:             options_mbs_auto.h 
//#
//# author:               Gerstmayr, Reischl, Saxinger
//#
//# generated:	
//# description: 
//# remarks:		
//#
//# Copyright (c) 2003-2013 Johannes Gerstmayr, Linz Center of Mechatronics GmbH, Austrian
//# Center of Competence in Mechatronics GmbH, Institute of Technical Mechanics at the 
//# Johannes Kepler Universitaet Linz, Austria. All rights reserved.
//#
//# This file is part of HotInt.
//# HotInt is free software: you can redistribute it and/or modify it under the terms of 
//# the HOTINT license. See folder "licenses" for more details.
//#
//# bug reports are welcome!!!
//# WWW:		www.hotint.org
//# email:	bug_reports@hotint.org or support@hotint.org
//#***************************************************************************************

//File automatically generated by Octave/Matlab script "documentation/autogeneration/generate_options_fn"!
//Do not manually change this file, because it will be overwritten
//Changes of the IOptions/DOptions/TOptions and EDC can be made in the tabular file "documentation/autogeneration/options_forautogen.txt"!
#ifndef OPTIONS_MBS_AUTO__H
#define OPTIONS_MBS_AUTO__H

void MultiBodySystem::Options2EDC(ElementDataContainer* edc)
{
  edc->TreeSetBoolC("LoggingOptions.Solver.general_information",GetIOption(180),"Print general solver information. This includes: Newtons relative error goal, contractivity, iteration error, and qualitative information about Jacobian-updates, as well as iteration error and number of newton iterations at each post newton step, and post newton iterations at each time step.");
  edc->TreeSetBoolC("LoggingOptions.Solver.newton_iteration_jacobi_condition",GetIOption(187),"Print condition number of Jacobi matrix in Newtons method whenever it is updated.");
  edc->TreeSetBoolC("LoggingOptions.Solver.newton_iteration_jacobi_matrix",GetIOption(181),"Print Jacobi matrix of Newtons method whenever it is updated.");
  edc->TreeSetBoolC("LoggingOptions.Solver.newton_iteration_residual_vector",GetIOption(182),"Print iterated residual vector at each Newton step.");
  edc->TreeSetBoolC("LoggingOptions.Solver.newton_iteration_solution_vector",GetIOption(183),"Print iterated solution vector at each Newton step.");
  edc->TreeSetBoolC("LoggingOptions.Solver.post_newton_iteration_data_vector",GetIOption(184),"Print data vector at each nonlinear iteration step.");
  edc->TreeSetBoolC("LoggingOptions.Solver.step_solution_vector_increment",GetIOption(185),"Print solution increment of each step (dynamic simulation: time step, static simulation: load step).");
  edc->TreeSetBoolC("LoggingOptions.Solver.step_solution_vector",GetIOption(186),"Print solution vector of each step (dynamic simulation: time step, static simulation: load step).");
  edc->TreeSetBoolC("LoggingOptions.EDCParser.general_information",GetIOption(190),"Print general information on parsed objects (e.g., while reading modeldata or configuration files).");
  edc->TreeSetIntC("LoggingOptions.output_level",GetIOption(199),"0..no output; 1..necessary output (Errors, start/end simulation); 2..almost necessary output (Warnings); 3..multiple simulation  output (parameter variation/optimization); 4..simulation output (solver); 5..extended output (useful information); 6..complete information; 7..debug level 1; 8..debug level 2; 9..max output.");
  edc->TreeSetIntC("LoggingOptions.output_precision_double",GetIOption(198),"number of significant digits of a double in output window and logfile.");
  edc->TreeSetIntC("LoggingOptions.output_precision_vector",GetIOption(197),"number of significant digits of a vector in output window and logfile.");
  edc->TreeSetIntC("LoggingOptions.output_precision_matrix",GetIOption(196),"number of significant digits of a matrix in output window and logfile.");
  edc->TreeSetIntC("LoggingOptions.max_error_messages",GetIOption(195),"Number of displayed error messages.");
  edc->TreeSetIntC("LoggingOptions.max_warning_messages",GetIOption(194),"Number of displayed warning messages.");
  edc->TreeSetDoubleC("LoggingOptions.computation_output_every_x_sec",GetDOption(199),"Write computation output every x seconds; notice: if solver logs are printed, then this option does not take effect.");
  edc->TreeSetBoolC("LoggingOptions.write_mass_and_stiffness_matrix",GetIOption(193),"Write the initial mass and stiffness matrices in Matlab format to files Mmat.dat and Kmat.dat, in Matlab directory.");
  edc->TreeSetStringC("LoggingOptions.default_log_filename",GetTOption(199),"Default filename for hotint log file.");
  edc->TreeSetDoubleC("LoggingOptions.critical_log_file_size",GetDOption(198),"critical log file size, after which a warning is displayed; in megabytes.");
  edc->TreeSetIntC("LoggingOptions.file_output_level",GetIOption(192),"0..no output; 1..necessary output (Errors, start/end simulation); 2..almost necessary output (Warnings); 3..multiple simulation  output (parameter variation/optimization); 4..simulation output (solver); 5..extended output (useful information); 6..complete information; 7..debug level 1; 8..debug level 2; 9..max output.");
  edc->TreeSetBoolC("GeneralOptions.Application.close_application_when_finished",GetIOption(220),"1|(0) ... (Don't) automatically close application after computation.");
  edc->TreeSetBoolC("GeneralOptions.Application.show_hotint_window",GetIOption(221),"1|(0) ... 1 .. show HOTINT window (minimized).");
  edc->TreeSetBoolC("GeneralOptions.Application.start_computation_automatically",GetIOption(222),"immediately start computation on program start");
  edc->TreeSetBoolC("GeneralOptions.Application.remove_experimental_menu_items",GetIOption(223),"1|(0) ... (Don't) remove experimental menu items.");
  edc->TreeSetBoolC("GeneralOptions.Application.reload_last_model",GetIOption(224),"1|(0) ... (Don't) reload the last saved model on program start");
  edc->TreeSetBoolC("GeneralOptions.Application.activate_autosave",GetIOption(225),"1|(0) ... (Don't) save the model automatically before each change of an object");
  edc->TreeSetStringC("GeneralOptions.Paths.application_path",GetTOption(101),"Path of the application.");
  edc->TreeSetStringC("GeneralOptions.Paths.record_frames_path",GetTOption(102),"Path to recorded image files.");
  edc->TreeSetStringC("GeneralOptions.Paths.hotint_input_data_path",GetTOption(103),"Path of Hotint Input Data file.");
  edc->TreeSetStringC("GeneralOptions.Paths.single_image_path",GetTOption(120),"Path to store single images (record frame dialog)");
  edc->TreeSetStringC("GeneralOptions.Paths.video_image_path",GetTOption(122),"Path to store video images series (recoed frame dialog)");
  edc->TreeSetStringC("GeneralOptions.Paths.plottool_image_path",GetTOption(124),"Path to store plottool images (plottool dialog");
  edc->TreeSetStringC("GeneralOptions.ModelFile.hotint_input_data_filename",GetTOption(110),"Name of Hotint Input Data file.");
  edc->TreeSetStringC("GeneralOptions.ModelFile.internal_model_function_name",GetTOption(112),"Name of internal model function (cpp).");
  edc->TreeSetStringC("GeneralOptions.ModelFile.recent_file1",GetTOption(113),"Recent file filename 1.");
  edc->TreeSetStringC("GeneralOptions.ModelFile.recent_file2",GetTOption(114),"Recent file filename 2.");
  edc->TreeSetStringC("GeneralOptions.ModelFile.recent_file3",GetTOption(115),"Recent file filename 3.");
  edc->TreeSetStringC("GeneralOptions.ModelFile.recent_file4",GetTOption(116),"Recent file filename 4.");
  edc->TreeSetStringC("GeneralOptions.ModelFile.recent_file5",GetTOption(117),"Recent file filename 5.");
  edc->TreeSetBoolC("GeneralOptions.ModelFile.accept_txt_file_as_model_file",GetIOption(170),"Enable this function to allow 'hotint_input_data_filename' with ending '.txt' as first argument (for drag and drop).");
  edc->TreeSetBoolC("GeneralOptions.Measurement.use_degrees",GetIOption(120),"1|(0) ... (Don't) use degrees instead of radiant in edit dialogs for bodies and joints.");
  edc->TreeSetIntC("GeneralOptions.Measurement.angle_mode",GetIOption(140),"Rotation input mode: 0=Euler angles, 1=Rotation X/Y/Z, 2=Euler parameters.");
  edc->TreeSetIntC("GeneralOptions.Measurement.units_of_legend",GetIOption(143),"Units of legend: 0=SI(m,N, etc.); 1=mm, N, etc.");
  edc->TreeSetIntC("GeneralOptions.OutputWindow.max_text_length",GetIOption(152),"Maximum text length (number of characters) for output text window, use -1 for no limit");
  edc->TreeSetBoolC("ViewingOptions.Animation.animate_from_beginning",GetIOption(115),"1|(0) ... (Don't) start animation from beginning.");
  edc->TreeSetIntC("ViewingOptions.Animation.animate_every_N_frame",GetIOption(109),"Animation frames: show every N'th frame at animation.");
  edc->TreeSetBoolC("ViewingOptions.Animation.animate_deformation",GetIOption(150),"1|(0) ... (Don't) animate deformation scaling.");
  edc->TreeSetBoolC("ViewingOptions.Animation.animate_deformation_once",GetIOption(153),"1 ... animate deformation (eigenmodes) only for one cycle - for recording; 0 ... endless animate");
  edc->TreeSetBoolC("ViewingOptions.Animation.RecordSingleFrames.record",GetIOption(163),"1|(0) ... (Don't) record frames");
  edc->TreeSetBoolC("ViewingOptions.Animation.RecordSingleFrames.process_image",GetIOption(164),"for each saved frame, call conversion program (Image Magick)");
  edc->TreeSetBoolC("ViewingOptions.Animation.RecordSingleFrames.show_frame_numbers",GetIOption(165),"1|(0) ... (Don't) show frame numbers in images);");
  edc->TreeSetIntC("ViewingOptions.Animation.RecordSingleFrames.record_every_x_frame",GetIOption(166),"record every x frames");
  edc->TreeSetStringC("ViewingOptions.Animation.RecordSingleFrames.single_file_name",GetTOption(121),"name of the single frame file without extensions");
  edc->TreeSetStringC("ViewingOptions.Animation.RecordSingleFrames.video_file_name",GetTOption(123),"name of the video frame file without extensions and number");
  edc->TreeSetIntC("ViewingOptions.Animation.RecordSingleFrames.default_image_format",GetIOption(167),"format of the exported file (default setting for radiobutton) 0..JPG, 1..PNG, 2..BMP");
  edc->TreeSetBoolC("ViewingOptions.Animation.RecordSingleFrames.include_output_window",GetIOption(168),"includes the output window to the screenshot");
  edc->TreeSetIntC("ViewingOptions.Misc.redraw_frequency",GetIOption(104),"Redraw frequency: 0..off, 1..draw last frame, 2..100sec, 3..20sec, 4..2sec, 5..200ms, 6..50ms, 7..20ms, 8..every 10 frames, 9..every frame.");
  edc->TreeSetBoolC("ViewingOptions.Misc.draw_background_transparent",GetIOption(131),"1|(0) ... (Don't) draw background objects transparent.");
  edc->TreeSetDoubleC("ViewingOptions.Misc.geom_element_line_thickness",GetDOption(119),"GeomElement (outline) line thickness ****.");
  edc->TreeSetDoubleC("ViewingOptions.Misc.global_line_thickness",GetDOption(114),"Global_line_thickness (coord system, etc.) ****.");
  edc->TreeSetDoubleC("ViewingOptions.Misc.global_point_size",GetDOption(117),"Global point size (coord system, grid, etc.) ****.");
  edc->TreeSetBoolC("ViewingOptions.Misc.show_3D_text_in_front",GetIOption(122),"1|(0) ... (Don't) show 3D texts in front.");
  edc->TreeSetBoolC("ViewingOptions.Origin.show",GetIOption(106),"1|(0) ... (Don't) draw coordinate system in origin (X0, Y0, Z0).");
  edc->TreeSetDoubleC("ViewingOptions.Origin.size_of_origin",GetDOption(103),"Size of origin.");
  edc->TreeSetIntC("ViewingOptions.Grid.show",GetIOption(126),"Show Grid and Background planes (add up), 1=XY, 2=XZ, 4=YZ.");
  edc->TreeSetDoubleC("ViewingOptions.Grid.pos_x",GetDOption(107),"X-position for interesction point of planes");
  edc->TreeSetDoubleC("ViewingOptions.Grid.pos_y",GetDOption(108),"Y-position for interesction point of planes");
  edc->TreeSetDoubleC("ViewingOptions.Grid.pos_z",GetDOption(109),"Z-position for interesction point of planes");
  edc->TreeSetDoubleC("ViewingOptions.Grid.size_1",GetDOption(112),"X-size of background plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.size_2",GetDOption(113),"Y-size of background plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.size_3",GetDOption(142),"Z-size of background plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.step_1",GetDOption(110),"Grid discretization X-direction");
  edc->TreeSetDoubleC("ViewingOptions.Grid.step_2",GetDOption(111),"Grid discretization Y-direction");
  edc->TreeSetDoubleC("ViewingOptions.Grid.step_3",GetDOption(143),"Grid discretization Z-direction");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.transparency_factor",GetDOption(144),"Transparency factor for the backgruond planes");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane1_col_r",GetDOption(133),"Red color channel for XY plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane1_col_g",GetDOption(134),"Green color channel for XY plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane1_col_b",GetDOption(135),"Blue color channel for XY plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane2_col_r",GetDOption(136),"Red color channel for XZ plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane2_col_g",GetDOption(137),"Green color channel for XZ plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane2_col_b",GetDOption(138),"Blue color channel for XZ plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane3_col_r",GetDOption(139),"Red color channel for YZ plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane3_col_g",GetDOption(140),"Green color channel for YZ plane");
  edc->TreeSetDoubleC("ViewingOptions.Grid.Colors.plane3_col_b",GetDOption(141),"Blue color channel for YZ plane");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.1.activate",GetIOption(149),"1|(0) ... Use (Don't use) cutting plane.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.1.normal_X",GetDOption(125),"Cutting plane normal-X.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.1.normal_Y",GetDOption(126),"Cutting plane normal-Y.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.1.normal_Z",GetDOption(127),"Cutting plane normal-Z.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.1.distance",GetDOption(128),"Cutting plane distance.");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.2.activate",GetIOption(156),"1|(0) ... Use (Don't use) cutting plane.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.2.normal_X",GetDOption(129),"Cutting plane 2 normal-X.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.2.normal_Y",GetDOption(130),"Cutting plane 2 normal-Y.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.2.normal_Z",GetDOption(131),"Cutting plane 2 normal-Z.");
  edc->TreeSetDoubleC("ViewingOptions.CuttingPlane.2.distance",GetDOption(132),"Cutting plane 2 distance.");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.cut_bodies",GetIOption(158),"1|(0) ... (Don't) cut bodies.");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.cut_bodies_altshapes",GetIOption(159),"1|(0) ... (Don't) cut alternative shapes of bodies.");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.cut_ground",GetIOption(161),"1|(0) ... (Don't) cut background.");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.cut_whole_scene_by_open_gl",GetIOption(157),"1|(0) ... (Don't) use OpenGL for handling cutting planes.");
  edc->TreeSetBoolC("ViewingOptions.CuttingPlane.nosurfaceupdate",GetIOption(119),"use of cutting plane does trigger a change of drawn surfaceelements");
  edc->TreeSetIntC("ViewingOptions.StandardView.angle_rot_axis_1",GetIOption(200),"Rotation axis for standard view angle_1 (rotation axis 1, 2 or 3).");
  edc->TreeSetIntC("ViewingOptions.StandardView.angle_rot_axis_2",GetIOption(201),"Rotation axis for standard view angle_2 (rotation axis 1, 2 or 3).");
  edc->TreeSetIntC("ViewingOptions.StandardView.angle_rot_axis_3",GetIOption(202),"Rotation axis for standard view angle_3 (rotation axis 1, 2 or 3).");
  edc->TreeSetIntC("ViewingOptions.StandardView.angle_rot_axis2_1",GetIOption(203),"Rotation axis for standard view angle2_1 (rotation axis 1, 2 or 3).");
  edc->TreeSetIntC("ViewingOptions.StandardView.angle_rot_axis2_2",GetIOption(204),"Rotation axis for standard view angle2_2 (rotation axis 1, 2 or 3).");
  edc->TreeSetIntC("ViewingOptions.StandardView.angle_rot_axis2_3",GetIOption(205),"Rotation axis for standard view angle2_3 (rotation axis 1, 2 or 3).");
  edc->TreeSetDoubleC("ViewingOptions.StandardView.angle_1",GetDOption(200),"Standard view angle_1.");
  edc->TreeSetDoubleC("ViewingOptions.StandardView.angle_2",GetDOption(201),"Standard view angle_2.");
  edc->TreeSetDoubleC("ViewingOptions.StandardView.angle_3",GetDOption(202),"Standard view angle_3.");
  edc->TreeSetDoubleC("ViewingOptions.StandardView.angle_2_1",GetDOption(203),"standard view angle2_1.not used yet.");
  edc->TreeSetDoubleC("ViewingOptions.StandardView.angle_2_2",GetDOption(204),"Standard view angle2_2.not used yet.");
  edc->TreeSetDoubleC("ViewingOptions.StandardView.angle_2_3",GetDOption(205),"Standard view angle2_3.not used yet.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.Rigid.draw_smooth",GetIOption(132),"1|(0) ... (Don't) draw bodies supersmooth.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.Rigid.show_outline",GetIOption(133),"1|(0) ... (Don't) show bodies outline.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.Rigid.show_faces",GetIOption(134),"1|(0) ... (Don't) show bodies faces.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.Rigid.line_thickness",GetDOption(115),"Rigid body (outline) line thickness ****.not used yet.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.Rigid.draw_center_of_gravity",GetIOption(251),"1|(0) ... (Don't) draw center of gravity");
  edc->TreeSetIntC("PostProcOptions.Bodies.Rigid.draw_resolution",GetIOption(258),"Draw resolution for Rigid3D.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.Rigid.COG_sizefactor",GetDOption(259),"Cog_factor for Rigid3D (default: 1).");
  edc->TreeSetBoolC("PostProcOptions.Bodies.show_element_numbers",GetIOption(123),"1|(0) ... (Don't) show element body numbers.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.show_local_frame",GetIOption(125),"1|(0) ... (Don't) show local body frame.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.transparent",GetIOption(128),"1|(0) ... (Don't) draw bodies transparent.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.local_frame_size",GetDOption(104),"Body local frame size.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.deformation_scale_factor",GetDOption(105),"Deformation scale factor.");
  edc->TreeSetIntC("PostProcOptions.Bodies.scale_rigid_body_displacements",GetIOption(151),"1|(0) ... (Don't) use deformation scale factor in animation.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.show_velocity_vector",GetIOption(154),"1|(0) ... (Don't) show velocity vector, e.g. for particles.");
  edc->TreeSetBoolC("PostProcOptions.Bodies.velocity_vector_just_for_particles",GetIOption(162),"1|(0) ... (Don't) show velocity vector for particles only.");
  edc->TreeSetIntC("PostProcOptions.Bodies.velocity_vector_scaling_mode",GetIOption(116),"1: constant scaling (a), 2: linear scaling (ax), 3: exponential scaling (a(1-exp(-x/b))).");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.velocity_vector_scaling_a",GetDOption(154),"magnification factor; e.g., if velocity_vector_scaling_mode == 2: velocity vector length = v*velocity_vector_scaling_a.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.velocity_vector_scaling_b",GetDOption(153),"knee factor; e.g., if velocity_vector_scaling_mode == 3: velocity vector length = velocity_vector_scaling_a*(1-exp(-v/velocity_vector_scaling_b)).");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.velocity_vector_scaling_thickness",GetDOption(152),"thickness scaling factor; independent from mode.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.Particles.displacement_scale_factor",GetDOption(156),"factor for scaling the displacements.");
  edc->TreeSetDoubleC("PostProcOptions.Bodies.Particles.draw_size_factor",GetDOption(155),"factor for adjusting the size of particles while drawing.");
  edc->TreeSetIntC("PostProcOptions.Bodies.Particles.draw_every_nth",GetIOption(155),"draw every n-th particle only.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.activate",GetIOption(111),"1|(0) ... (Don't) show solution in mesh as contour plot.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.max_stress_active",GetIOption(100),"1|(0) ... Max. stress is (not) updated during computation.");
  edc->TreeSetDoubleC("PostProcOptions.FiniteElements.Contour.max_stress",GetDOption(100),"Value of max. stress.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.min_stress_active",GetIOption(101),"1|(0) ... Min. stress is (not) updated during computation.");
  edc->TreeSetDoubleC("PostProcOptions.FiniteElements.Contour.min_stress",GetDOption(101),"Value of min. stress.");
  edc->TreeSetStringC("PostProcOptions.FiniteElements.Contour.post_processing_variable_name",GetTOption(107),"Name of the field variable, which is currently selected for contour plotting.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.variable_range_auto_update",GetIOption(102),"1|(0) ... (Don't) update the range of the variable each time a new scene is plotted.");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Contour.color_tiling",GetIOption(103),"Color tiling (used for FE-color texture).");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Contour.label_precision",GetIOption(160),"number of digits for the numbers in label.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.plot_interpolated",GetIOption(118),"1|(0) ... (Don't) draw Stress/strain/etc. interpolated at nodes.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.grey_mode",GetIOption(105),"1|(0) ... (Don't) draw grey colors for finite elements.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.invert_colors",GetIOption(107),"1|(0) ... (Don't) invert colors.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.nonlinear_color_legend",GetIOption(108),"1|(0) ... (Don't) create nonlinear distributed color legend.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Contour.hide_legend",GetIOption(141),"1|(0) ... (Don't) hide color legend.");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Contour.axis_tiling",GetIOption(136),"Axis tiling (for element face and outline, beams and plates).");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Contour.resolution_axis",GetIOption(137),"Axis resolution: contour plot resolution along axis, beams and plates.");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Contour.resolution_cross_section",GetIOption(138),"Cross-section resolution: contour plot resolution at cross-section, beams and plates.");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Contour.resolution_solid_elements",GetIOption(139),"Contour plot resolution for solid finite elements.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Nodes.show",GetIOption(145),"1|(0) ... (Don't) draw nodes.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Nodes.show_node_numbers",GetIOption(148),"1|(0) ... (Don't) show node numbers.");
  edc->TreeSetIntC("PostProcOptions.FiniteElements.Nodes.node_resolution",GetIOption(147),"Node resolution for drawing.");
  edc->TreeSetDoubleC("PostProcOptions.FiniteElements.Nodes.node_size",GetDOption(124),"Draw node size.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Mesh.show",GetIOption(110),"1|(0) ... (Don't) show mesh of finite element.");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Mesh.draw_flat_elements",GetIOption(117),"1|(0) ... (Don't) draw Plate elements flat, only midplane (view from top only).");
  edc->TreeSetBoolC("PostProcOptions.FiniteElements.Mesh.draw_only_surface_elements",GetIOption(146),"1|(0) ... (Don't) draw surface elements only.");
  edc->TreeSetDoubleC("PostProcOptions.FiniteElements.Mesh.element_line_thickness",GetDOption(102),"Finite element line thickness (outline of 2D and 3D beam, plate).");
  edc->TreeSetDoubleC("PostProcOptions.FiniteElements.Mesh.shrinking_factor",GetDOption(106),"Shrinking factor.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.show_constraints",GetIOption(121),"1|(0) ... (Don't) show joints/connectors.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.show_control_elements",GetIOption(144),"1|(0) ... (Don't) draw control elements in 3D Window..");
  edc->TreeSetBoolC("PostProcOptions.Connectors.show_constraint_numbers",GetIOption(124),"1|(0) ... (Don't) show constraint number.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.show_faces",GetIOption(114),"1|(0) ... (Don't) show constraint faces --> show constraint faces.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.transparent",GetIOption(129),"1|(0) ... (Don't) draw constraints transparent.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.draw_outline",GetIOption(135),"1|(0) ... (Don't) draw constraints outline **** --> faces is IOption 114.not used yet.");
  edc->TreeSetDoubleC("PostProcOptions.Connectors.line_thickness",GetDOption(116),"Constraint (outline) line thickness ****.not used yet.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.Contact.show_contact_as_circle",GetIOption(113),"1|(0) ... (Don't) draw circles at contact of bodies.");
  edc->TreeSetBoolC("PostProcOptions.Connectors.Contact.show_contact_points",GetIOption(112),"1|(0) ... (Don't) show contact points.");
  edc->TreeSetDoubleC("PostProcOptions.Connectors.global_draw_scalar_size",GetDOption(171),"global scalar constraint draw size (e.g.radius)");
  edc->TreeSetDoubleC("PostProcOptions.Connectors.global_draw_axis_length",GetDOption(172),"global draw axis length of constraint");
  edc->TreeSetDoubleC("PostProcOptions.Connectors.global_draw_resolution",GetDOption(173),"global constraint draw resolution");
  edc->TreeSetBoolC("PostProcOptions.Loads.show_loads",GetIOption(142),"1|(0) ... (Don't) show loads.");
  edc->TreeSetDoubleC("PostProcOptions.Loads.arrow_size",GetDOption(120),"Size of arrow for drawing of loads.");
  edc->TreeSetDoubleC("PostProcOptions.Loads.color_red",GetDOption(121),"Red-value for drawing of loads (use values between 0. and 1.).");
  edc->TreeSetDoubleC("PostProcOptions.Loads.color_green",GetDOption(122),"Green-value for drawing of loads (use values between 0. and 1.).");
  edc->TreeSetDoubleC("PostProcOptions.Loads.color_blue",GetDOption(123),"Blue-value for drawing of loads (use values between 0. and 1.).");
  edc->TreeSetBoolC("PostProcOptions.Sensors.show_sensors",GetIOption(127),"1|(0) ... (Don't) show sensors.");
  edc->TreeSetBoolC("PostProcOptions.Sensors.transparent",GetIOption(130),"1|(0) ... (Don't) draw sensors transparent.");
  edc->TreeSetDoubleC("PostProcOptions.Sensors.sensor_origin_size",GetDOption(118),"Sensor origin size.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.enable_lighting",GetIOption(206),"OpenGL lighting.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.smooth_model",GetIOption(207),"OpenGL SMOOTH ShadeModel smooth.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.immediate_apply_dialog",GetIOption(212),"Immediate apply in openGL dialog.");
  edc->TreeSetIntC("GraphicsOptions.OpenGL.global_culling",GetIOption(213),"OpenGL cull (means: exclude) 1=front 2=back or 3=both views on faces of polygons; 0=don't cull any view.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.global_transparency",GetDOption(206),"Global transparency for SetColor, 1=no translucency, 0=fully transparent.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.material_shininess",GetDOption(219),"Material shininess (0..128).");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.material_color_intensity",GetDOption(220),"Material specular color intensity.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.Light1.enable",GetIOption(208),"OpenGL enable light1.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.Light1.use_light_position",GetIOption(210),"OpenGL light1 mode (0=standard, 1=use light position).");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light1.ambient",GetDOption(207),"Light1 ambient parameter.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light1.diffuse",GetDOption(208),"Light1 diffuse parameter.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light1.specular",GetDOption(209),"Light1 specular parameter.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light1.pos_x",GetDOption(213),"Light1 posx.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light1.pos_y",GetDOption(214),"Light1 posy.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light1.pos_z",GetDOption(215),"Light1 posz.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.Light2.enable",GetIOption(209),"OpenGL enable light2.");
  edc->TreeSetBoolC("GraphicsOptions.OpenGL.Light2.use_light_position",GetIOption(211),"OpenGL light2 mode (0=standard, 1=use light position).");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light2.ambient",GetDOption(210),"Light2 ambient parameter.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light2.diffuse",GetDOption(211),"Light2 diffuse parameter.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light2.specular",GetDOption(212),"Light2 specular parameter.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light2.pos_x",GetDOption(216),"Light2 posx.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light2.pos_y",GetDOption(217),"Light2 posy.");
  edc->TreeSetDoubleC("GraphicsOptions.OpenGL.Light2.pos_z",GetDOption(218),"Light2 posz.");
  edc->TreeSetBoolC("PlotToolOptions.activate",GetIOption(254),"1|(0) .. (Don't) activate HOTINT-plottool.");
  edc->TreeSetBoolC("PlotToolOptions.auto_redraw",GetIOption(255),"1|(0) .. (Don't) redraw in regular intervals");
  edc->TreeSetDoubleC("PlotToolOptions.auto_redraw_interval",GetDOption(255),"redraw every x seconds");
  edc->TreeSetBoolC("PlotToolOptions.auto_rescale",GetIOption(257),"1|(0) .. (Don't) rescale to fully fit the whole data when updated");
  edc->TreeSetDoubleC("PlotToolOptions.title_size_factor",GetDOption(256),"factor to in-/decrease font size of title in respect to axis font");
  edc->TreeSetDoubleC("PlotToolOptions.ticks_size_factor",GetDOption(257),"factor to in-/decrease font size of ticks in respect to axis font");
  edc->TreeSetIntC("PlotToolOptions.line_thickness_border",GetIOption(256),"line thickness (border) in logical points");
  edc->TreeSetDoubleC("PlotToolOptions.line_thickness_factor",GetDOption(258),"scaling factor for all plotted lines");
  edc->TreeSetBoolC("PlotToolOptions.status_bar_info",GetIOption(259),"1|(0) .. (Don't) show status bar information.");
  edc->TreeSetBoolC("PlotToolOptions.DataPoints.flag_draw_every_nth",GetIOption(290),"1|(0) .. (Don't) skip several datapoints in draw routine)");
  edc->TreeSetIntC("PlotToolOptions.DataPoints.draw_every_nth",GetIOption(291),"draw every nth datapoint (0 for every)");
  edc->TreeSetBoolC("PlotToolOptions.DataPoints.flag_mark_every_nth",GetIOption(292),"1|(0) .. (Don't) skip marking of several datapoints in draw routine)");
  edc->TreeSetIntC("PlotToolOptions.DataPoints.mark_every_nth",GetIOption(293),"mark every nth datapoint (0 for every)");
  edc->TreeSetBoolC("PlotToolOptions.DataPoints.vertical_marker",GetIOption(294),"1|(0) .. (Don't )mark current time in plot with a special marker");
  edc->TreeSetBoolC("PlotToolOptions.DataPoints.draw_only_to_time",GetIOption(295),"1|(0) .. (Don't) draw the data only up to the time from datamanager");
  edc->TreeSetIntC("PlotToolOptions.View.initial_size_horizontal",GetIOption(260),"initial size of the CView holding the plot");
  edc->TreeSetIntC("PlotToolOptions.View.initial_size_vertical",GetIOption(261),"initial size of the CView holding the plot");
  edc->TreeSetIntC("PlotToolOptions.View.plot_horizontal",GetIOption(262),"size in logical units for the plot - fixed aspect ratio");
  edc->TreeSetIntC("PlotToolOptions.View.plot_vertical",GetIOption(263),"size in logical units for the plot - fixed aspect ratio");
  edc->TreeSetDoubleC("PlotToolOptions.View.distance_left",GetDOption(260),"surplus in %plotwidth from left border of the plot to left border of the window");
  edc->TreeSetDoubleC("PlotToolOptions.View.distance_top",GetDOption(261),"surplus in %plotheight from upper border of the plot to the upper border of the window");
  edc->TreeSetDoubleC("PlotToolOptions.View.distance_bottom",GetDOption(262),"surplus in %plotheight from lower border of the plot to the lower border of the window");
  edc->TreeSetDoubleC("PlotToolOptions.View.distance_right",GetDOption(263),"surplus in %plotheight from lower border of the plot to the lower border of the window");
  edc->TreeSetIntC("PlotToolOptions.Watches.initial_size_horizontal",GetIOption(278),"initial size of the CView holding the plot");
  edc->TreeSetIntC("PlotToolOptions.Watches.initial_size_vertical",GetIOption(279),"initial size of the CView holding the plot");
  edc->TreeSetBoolC("PlotToolOptions.Axis.draw_at_origin",GetIOption(265),"1|(0) .. (Don't) draw axis at origin");
  edc->TreeSetBoolC("PlotToolOptions.Axis.label_major",GetIOption(266),"1|(0) .. (Don't) write lables for major ticks");
  edc->TreeSetBoolC("PlotToolOptions.Axis.label_minor",GetIOption(267),"1|(0) .. (Don't) write lables for minor ticks");
  edc->TreeSetDoubleC("PlotToolOptions.Axis.overdraw",GetDOption(265),"percentage the axis are longer than the graph");
  edc->TreeSetDoubleC("PlotToolOptions.Axis.ticksize",GetDOption(266),"size in percent of major ticks, minor are half size");
  edc->TreeSetIntC("PlotToolOptions.Axis.minor_ticks_x",GetIOption(268),"minor ticks for x-axis");
  edc->TreeSetIntC("PlotToolOptions.Axis.minor_ticks_y",GetIOption(269),"minor ticks for y-axis");
  edc->TreeSetIntC("PlotToolOptions.Axis.digits_x_labels",GetIOption(276),"maximum digits for x-axis labels");
  edc->TreeSetIntC("PlotToolOptions.Axis.digits_y_labels",GetIOption(277),"maximum digits for y-axis labels");
  edc->TreeSetIntC("PlotToolOptions.Grid.linetype_major_x",GetIOption(270),"Linetype for major gridlines, x axis (0 = no line, 1 = solid, 2 = dash, 3 = dot)");
  edc->TreeSetIntC("PlotToolOptions.Grid.linetype_minor_x",GetIOption(271),"Linetype for minor gridlines, x axis (0 = no line, 1 = solid, 2 = dash, 3 = dot)");
  edc->TreeSetIntC("PlotToolOptions.Grid.linetype_major_y",GetIOption(272),"Linetype for major gridlines, y axis (0 = no line, 1 = solid, 2 = dash, 3 = dot)");
  edc->TreeSetIntC("PlotToolOptions.Grid.linetype_minor_y",GetIOption(273),"Linetype for minor gridlines, y axis (0 = no line, 1 = solid, 2 = dash, 3 = dot)");
  edc->TreeSetBoolC("PlotToolOptions.Legend.show",GetIOption(275),"1|(0) .. (Don't) draw axis at origin");
  edc->TreeSetDoubleC("PlotToolOptions.Legend.left",GetDOption(275),"position in % of the legend's left border");
  edc->TreeSetDoubleC("PlotToolOptions.Legend.right",GetDOption(276),"position in % of the legend's right border");
  edc->TreeSetDoubleC("PlotToolOptions.Legend.top",GetDOption(277),"position in % of the legend's upper border");
  edc->TreeSetDoubleC("PlotToolOptions.Legend.bottom",GetDOption(278),"position in % of the legend's lower border");
  edc->TreeSetStringC("PlotToolOptions.SavePicture.filename",GetTOption(125),"filename for the picture without extensions");
  edc->TreeSetIntC("PlotToolOptions.SavePicture.size_horizontal",GetIOption(280),"size in pixels of the saved BMP");
  edc->TreeSetIntC("PlotToolOptions.SavePicture.size_vertical",GetIOption(281),"size in pixels of the saved BMP");
  edc->TreeSetIntC("PlotToolOptions.SavePicture.jpg_quality",GetIOption(282),"quality setting for the JPG encoder");
  edc->TreeSetBoolC("PlotToolOptions.SavePicture.store_jpg",GetIOption(285),"1|(0) .. (Don't) store image as jpg");
  edc->TreeSetBoolC("PlotToolOptions.SavePicture.store_png",GetIOption(286),"1|(0) .. (Don't) store image as png");
  edc->TreeSetBoolC("PlotToolOptions.SavePicture.store_bmp",GetIOption(287),"1|(0) .. (Don't) store image as bmp");
  edc->TreeSetBoolC("PlotToolOptions.SavePicture.store_emf",GetIOption(288),"1|(0) .. (Don't) store image as emf");
  edc->TreeSetDoubleC("PreProcOptions.SimulinkModelFormatParser.approx_period_cont2disc",GetDOption(230),"Continuous time delays are realized with multiple serial time discrete delays. Their period is limited by this variable.");
  edc->TreeSetDoubleC("PreProcOptions.SimulinkModelFormatParser.DefaultValues.StaticDynamicFricion.zeroZone",GetDOption(231),"Default value of zero zone of input-output elements with static and dynamic friction. Set to positive value to get finite slope around zero to improve convergence of solver.");
}
void MultiBodySystem::EDC2Options(const ElementDataContainer* edc)
{
  SetIOption(180, edc->TreeGetInt("LoggingOptions.Solver.general_information"));
  SetIOption(187, edc->TreeGetInt("LoggingOptions.Solver.newton_iteration_jacobi_condition"));
  SetIOption(181, edc->TreeGetInt("LoggingOptions.Solver.newton_iteration_jacobi_matrix"));
  SetIOption(182, edc->TreeGetInt("LoggingOptions.Solver.newton_iteration_residual_vector"));
  SetIOption(183, edc->TreeGetInt("LoggingOptions.Solver.newton_iteration_solution_vector"));
  SetIOption(184, edc->TreeGetInt("LoggingOptions.Solver.post_newton_iteration_data_vector"));
  SetIOption(185, edc->TreeGetInt("LoggingOptions.Solver.step_solution_vector_increment"));
  SetIOption(186, edc->TreeGetInt("LoggingOptions.Solver.step_solution_vector"));
  SetIOption(190, edc->TreeGetInt("LoggingOptions.EDCParser.general_information"));
  SetIOption(199, edc->TreeGetInt("LoggingOptions.output_level"));
  SetIOption(198, edc->TreeGetInt("LoggingOptions.output_precision_double"));
  SetIOption(197, edc->TreeGetInt("LoggingOptions.output_precision_vector"));
  SetIOption(196, edc->TreeGetInt("LoggingOptions.output_precision_matrix"));
  SetIOption(195, edc->TreeGetInt("LoggingOptions.max_error_messages"));
  SetIOption(194, edc->TreeGetInt("LoggingOptions.max_warning_messages"));
  SetDOption(199, edc->TreeGetDouble("LoggingOptions.computation_output_every_x_sec"));
  SetIOption(193, edc->TreeGetInt("LoggingOptions.write_mass_and_stiffness_matrix"));
  SetTOption(199, edc->TreeGetString("LoggingOptions.default_log_filename"));
  SetDOption(198, edc->TreeGetDouble("LoggingOptions.critical_log_file_size"));
  SetIOption(192, edc->TreeGetInt("LoggingOptions.file_output_level"));
  SetIOption(220, edc->TreeGetInt("GeneralOptions.Application.close_application_when_finished"));
  SetIOption(221, edc->TreeGetInt("GeneralOptions.Application.show_hotint_window"));
  SetIOption(222, edc->TreeGetInt("GeneralOptions.Application.start_computation_automatically"));
  SetIOption(223, edc->TreeGetInt("GeneralOptions.Application.remove_experimental_menu_items"));
  SetIOption(224, edc->TreeGetInt("GeneralOptions.Application.reload_last_model"));
  SetIOption(225, edc->TreeGetInt("GeneralOptions.Application.activate_autosave"));
  SetTOption(101, edc->TreeGetString("GeneralOptions.Paths.application_path"));
  SetTOption(102, edc->TreeGetString("GeneralOptions.Paths.record_frames_path"));
  SetTOption(103, edc->TreeGetString("GeneralOptions.Paths.hotint_input_data_path"));
  SetTOption(120, edc->TreeGetString("GeneralOptions.Paths.single_image_path"));
  SetTOption(122, edc->TreeGetString("GeneralOptions.Paths.video_image_path"));
  SetTOption(124, edc->TreeGetString("GeneralOptions.Paths.plottool_image_path"));
  SetTOption(110, edc->TreeGetString("GeneralOptions.ModelFile.hotint_input_data_filename"));
  SetTOption(112, edc->TreeGetString("GeneralOptions.ModelFile.internal_model_function_name"));
  SetTOption(113, edc->TreeGetString("GeneralOptions.ModelFile.recent_file1"));
  SetTOption(114, edc->TreeGetString("GeneralOptions.ModelFile.recent_file2"));
  SetTOption(115, edc->TreeGetString("GeneralOptions.ModelFile.recent_file3"));
  SetTOption(116, edc->TreeGetString("GeneralOptions.ModelFile.recent_file4"));
  SetTOption(117, edc->TreeGetString("GeneralOptions.ModelFile.recent_file5"));
  SetIOption(170, edc->TreeGetInt("GeneralOptions.ModelFile.accept_txt_file_as_model_file"));
  SetIOption(120, edc->TreeGetInt("GeneralOptions.Measurement.use_degrees"));
  SetIOption(140, edc->TreeGetInt("GeneralOptions.Measurement.angle_mode"));
  SetIOption(143, edc->TreeGetInt("GeneralOptions.Measurement.units_of_legend"));
  SetIOption(152, edc->TreeGetInt("GeneralOptions.OutputWindow.max_text_length"));
  SetIOption(115, edc->TreeGetInt("ViewingOptions.Animation.animate_from_beginning"));
  SetIOption(109, edc->TreeGetInt("ViewingOptions.Animation.animate_every_N_frame"));
  SetIOption(150, edc->TreeGetInt("ViewingOptions.Animation.animate_deformation"));
  SetIOption(153, edc->TreeGetInt("ViewingOptions.Animation.animate_deformation_once"));
  SetIOption(163, edc->TreeGetInt("ViewingOptions.Animation.RecordSingleFrames.record"));
  SetIOption(164, edc->TreeGetInt("ViewingOptions.Animation.RecordSingleFrames.process_image"));
  SetIOption(165, edc->TreeGetInt("ViewingOptions.Animation.RecordSingleFrames.show_frame_numbers"));
  SetIOption(166, edc->TreeGetInt("ViewingOptions.Animation.RecordSingleFrames.record_every_x_frame"));
  SetTOption(121, edc->TreeGetString("ViewingOptions.Animation.RecordSingleFrames.single_file_name"));
  SetTOption(123, edc->TreeGetString("ViewingOptions.Animation.RecordSingleFrames.video_file_name"));
  SetIOption(167, edc->TreeGetInt("ViewingOptions.Animation.RecordSingleFrames.default_image_format"));
  SetIOption(168, edc->TreeGetInt("ViewingOptions.Animation.RecordSingleFrames.include_output_window"));
  SetIOption(104, edc->TreeGetInt("ViewingOptions.Misc.redraw_frequency"));
  SetIOption(131, edc->TreeGetInt("ViewingOptions.Misc.draw_background_transparent"));
  SetDOption(119, edc->TreeGetDouble("ViewingOptions.Misc.geom_element_line_thickness"));
  SetDOption(114, edc->TreeGetDouble("ViewingOptions.Misc.global_line_thickness"));
  SetDOption(117, edc->TreeGetDouble("ViewingOptions.Misc.global_point_size"));
  SetIOption(122, edc->TreeGetInt("ViewingOptions.Misc.show_3D_text_in_front"));
  SetIOption(106, edc->TreeGetInt("ViewingOptions.Origin.show"));
  SetDOption(103, edc->TreeGetDouble("ViewingOptions.Origin.size_of_origin"));
  SetIOption(126, edc->TreeGetInt("ViewingOptions.Grid.show"));
  SetDOption(107, edc->TreeGetDouble("ViewingOptions.Grid.pos_x"));
  SetDOption(108, edc->TreeGetDouble("ViewingOptions.Grid.pos_y"));
  SetDOption(109, edc->TreeGetDouble("ViewingOptions.Grid.pos_z"));
  SetDOption(112, edc->TreeGetDouble("ViewingOptions.Grid.size_1"));
  SetDOption(113, edc->TreeGetDouble("ViewingOptions.Grid.size_2"));
  SetDOption(142, edc->TreeGetDouble("ViewingOptions.Grid.size_3"));
  SetDOption(110, edc->TreeGetDouble("ViewingOptions.Grid.step_1"));
  SetDOption(111, edc->TreeGetDouble("ViewingOptions.Grid.step_2"));
  SetDOption(143, edc->TreeGetDouble("ViewingOptions.Grid.step_3"));
  SetDOption(144, edc->TreeGetDouble("ViewingOptions.Grid.Colors.transparency_factor"));
  SetDOption(133, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane1_col_r"));
  SetDOption(134, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane1_col_g"));
  SetDOption(135, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane1_col_b"));
  SetDOption(136, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane2_col_r"));
  SetDOption(137, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane2_col_g"));
  SetDOption(138, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane2_col_b"));
  SetDOption(139, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane3_col_r"));
  SetDOption(140, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane3_col_g"));
  SetDOption(141, edc->TreeGetDouble("ViewingOptions.Grid.Colors.plane3_col_b"));
  SetIOption(149, edc->TreeGetInt("ViewingOptions.CuttingPlane.1.activate"));
  SetDOption(125, edc->TreeGetDouble("ViewingOptions.CuttingPlane.1.normal_X"));
  SetDOption(126, edc->TreeGetDouble("ViewingOptions.CuttingPlane.1.normal_Y"));
  SetDOption(127, edc->TreeGetDouble("ViewingOptions.CuttingPlane.1.normal_Z"));
  SetDOption(128, edc->TreeGetDouble("ViewingOptions.CuttingPlane.1.distance"));
  SetIOption(156, edc->TreeGetInt("ViewingOptions.CuttingPlane.2.activate"));
  SetDOption(129, edc->TreeGetDouble("ViewingOptions.CuttingPlane.2.normal_X"));
  SetDOption(130, edc->TreeGetDouble("ViewingOptions.CuttingPlane.2.normal_Y"));
  SetDOption(131, edc->TreeGetDouble("ViewingOptions.CuttingPlane.2.normal_Z"));
  SetDOption(132, edc->TreeGetDouble("ViewingOptions.CuttingPlane.2.distance"));
  SetIOption(158, edc->TreeGetInt("ViewingOptions.CuttingPlane.cut_bodies"));
  SetIOption(159, edc->TreeGetInt("ViewingOptions.CuttingPlane.cut_bodies_altshapes"));
  SetIOption(161, edc->TreeGetInt("ViewingOptions.CuttingPlane.cut_ground"));
  SetIOption(157, edc->TreeGetInt("ViewingOptions.CuttingPlane.cut_whole_scene_by_open_gl"));
  SetIOption(119, edc->TreeGetInt("ViewingOptions.CuttingPlane.nosurfaceupdate"));
  SetIOption(200, edc->TreeGetInt("ViewingOptions.StandardView.angle_rot_axis_1"));
  SetIOption(201, edc->TreeGetInt("ViewingOptions.StandardView.angle_rot_axis_2"));
  SetIOption(202, edc->TreeGetInt("ViewingOptions.StandardView.angle_rot_axis_3"));
  SetIOption(203, edc->TreeGetInt("ViewingOptions.StandardView.angle_rot_axis2_1"));
  SetIOption(204, edc->TreeGetInt("ViewingOptions.StandardView.angle_rot_axis2_2"));
  SetIOption(205, edc->TreeGetInt("ViewingOptions.StandardView.angle_rot_axis2_3"));
  SetDOption(200, edc->TreeGetDouble("ViewingOptions.StandardView.angle_1"));
  SetDOption(201, edc->TreeGetDouble("ViewingOptions.StandardView.angle_2"));
  SetDOption(202, edc->TreeGetDouble("ViewingOptions.StandardView.angle_3"));
  SetDOption(203, edc->TreeGetDouble("ViewingOptions.StandardView.angle_2_1"));
  SetDOption(204, edc->TreeGetDouble("ViewingOptions.StandardView.angle_2_2"));
  SetDOption(205, edc->TreeGetDouble("ViewingOptions.StandardView.angle_2_3"));
  SetIOption(132, edc->TreeGetInt("PostProcOptions.Bodies.Rigid.draw_smooth"));
  SetIOption(133, edc->TreeGetInt("PostProcOptions.Bodies.Rigid.show_outline"));
  SetIOption(134, edc->TreeGetInt("PostProcOptions.Bodies.Rigid.show_faces"));
  SetDOption(115, edc->TreeGetDouble("PostProcOptions.Bodies.Rigid.line_thickness"));
  SetIOption(251, edc->TreeGetInt("PostProcOptions.Bodies.Rigid.draw_center_of_gravity"));
  SetIOption(258, edc->TreeGetInt("PostProcOptions.Bodies.Rigid.draw_resolution"));
  SetDOption(259, edc->TreeGetDouble("PostProcOptions.Bodies.Rigid.COG_sizefactor"));
  SetIOption(123, edc->TreeGetInt("PostProcOptions.Bodies.show_element_numbers"));
  SetIOption(125, edc->TreeGetInt("PostProcOptions.Bodies.show_local_frame"));
  SetIOption(128, edc->TreeGetInt("PostProcOptions.Bodies.transparent"));
  SetDOption(104, edc->TreeGetDouble("PostProcOptions.Bodies.local_frame_size"));
  SetDOption(105, edc->TreeGetDouble("PostProcOptions.Bodies.deformation_scale_factor"));
  SetIOption(151, edc->TreeGetInt("PostProcOptions.Bodies.scale_rigid_body_displacements"));
  SetIOption(154, edc->TreeGetInt("PostProcOptions.Bodies.show_velocity_vector"));
  SetIOption(162, edc->TreeGetInt("PostProcOptions.Bodies.velocity_vector_just_for_particles"));
  SetIOption(116, edc->TreeGetInt("PostProcOptions.Bodies.velocity_vector_scaling_mode"));
  SetDOption(154, edc->TreeGetDouble("PostProcOptions.Bodies.velocity_vector_scaling_a"));
  SetDOption(153, edc->TreeGetDouble("PostProcOptions.Bodies.velocity_vector_scaling_b"));
  SetDOption(152, edc->TreeGetDouble("PostProcOptions.Bodies.velocity_vector_scaling_thickness"));
  SetDOption(156, edc->TreeGetDouble("PostProcOptions.Bodies.Particles.displacement_scale_factor"));
  SetDOption(155, edc->TreeGetDouble("PostProcOptions.Bodies.Particles.draw_size_factor"));
  SetIOption(155, edc->TreeGetInt("PostProcOptions.Bodies.Particles.draw_every_nth"));
  SetIOption(111, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.activate"));
  SetIOption(100, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.max_stress_active"));
  SetDOption(100, edc->TreeGetDouble("PostProcOptions.FiniteElements.Contour.max_stress"));
  SetIOption(101, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.min_stress_active"));
  SetDOption(101, edc->TreeGetDouble("PostProcOptions.FiniteElements.Contour.min_stress"));
  SetTOption(107, edc->TreeGetString("PostProcOptions.FiniteElements.Contour.post_processing_variable_name"));
  SetIOption(102, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.variable_range_auto_update"));
  SetIOption(103, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.color_tiling"));
  SetIOption(160, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.label_precision"));
  SetIOption(118, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.plot_interpolated"));
  SetIOption(105, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.grey_mode"));
  SetIOption(107, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.invert_colors"));
  SetIOption(108, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.nonlinear_color_legend"));
  SetIOption(141, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.hide_legend"));
  SetIOption(136, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.axis_tiling"));
  SetIOption(137, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.resolution_axis"));
  SetIOption(138, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.resolution_cross_section"));
  SetIOption(139, edc->TreeGetInt("PostProcOptions.FiniteElements.Contour.resolution_solid_elements"));
  SetIOption(145, edc->TreeGetInt("PostProcOptions.FiniteElements.Nodes.show"));
  SetIOption(148, edc->TreeGetInt("PostProcOptions.FiniteElements.Nodes.show_node_numbers"));
  SetIOption(147, edc->TreeGetInt("PostProcOptions.FiniteElements.Nodes.node_resolution"));
  SetDOption(124, edc->TreeGetDouble("PostProcOptions.FiniteElements.Nodes.node_size"));
  SetIOption(110, edc->TreeGetInt("PostProcOptions.FiniteElements.Mesh.show"));
  SetIOption(117, edc->TreeGetInt("PostProcOptions.FiniteElements.Mesh.draw_flat_elements"));
  SetIOption(146, edc->TreeGetInt("PostProcOptions.FiniteElements.Mesh.draw_only_surface_elements"));
  SetDOption(102, edc->TreeGetDouble("PostProcOptions.FiniteElements.Mesh.element_line_thickness"));
  SetDOption(106, edc->TreeGetDouble("PostProcOptions.FiniteElements.Mesh.shrinking_factor"));
  SetIOption(121, edc->TreeGetInt("PostProcOptions.Connectors.show_constraints"));
  SetIOption(144, edc->TreeGetInt("PostProcOptions.Connectors.show_control_elements"));
  SetIOption(124, edc->TreeGetInt("PostProcOptions.Connectors.show_constraint_numbers"));
  SetIOption(114, edc->TreeGetInt("PostProcOptions.Connectors.show_faces"));
  SetIOption(129, edc->TreeGetInt("PostProcOptions.Connectors.transparent"));
  SetIOption(135, edc->TreeGetInt("PostProcOptions.Connectors.draw_outline"));
  SetDOption(116, edc->TreeGetDouble("PostProcOptions.Connectors.line_thickness"));
  SetIOption(113, edc->TreeGetInt("PostProcOptions.Connectors.Contact.show_contact_as_circle"));
  SetIOption(112, edc->TreeGetInt("PostProcOptions.Connectors.Contact.show_contact_points"));
  SetDOption(171, edc->TreeGetDouble("PostProcOptions.Connectors.global_draw_scalar_size"));
  SetDOption(172, edc->TreeGetDouble("PostProcOptions.Connectors.global_draw_axis_length"));
  SetDOption(173, edc->TreeGetDouble("PostProcOptions.Connectors.global_draw_resolution"));
  SetIOption(142, edc->TreeGetInt("PostProcOptions.Loads.show_loads"));
  SetDOption(120, edc->TreeGetDouble("PostProcOptions.Loads.arrow_size"));
  SetDOption(121, edc->TreeGetDouble("PostProcOptions.Loads.color_red"));
  SetDOption(122, edc->TreeGetDouble("PostProcOptions.Loads.color_green"));
  SetDOption(123, edc->TreeGetDouble("PostProcOptions.Loads.color_blue"));
  SetIOption(127, edc->TreeGetInt("PostProcOptions.Sensors.show_sensors"));
  SetIOption(130, edc->TreeGetInt("PostProcOptions.Sensors.transparent"));
  SetDOption(118, edc->TreeGetDouble("PostProcOptions.Sensors.sensor_origin_size"));
  SetIOption(206, edc->TreeGetInt("GraphicsOptions.OpenGL.enable_lighting"));
  SetIOption(207, edc->TreeGetInt("GraphicsOptions.OpenGL.smooth_model"));
  SetIOption(212, edc->TreeGetInt("GraphicsOptions.OpenGL.immediate_apply_dialog"));
  SetIOption(213, edc->TreeGetInt("GraphicsOptions.OpenGL.global_culling"));
  SetDOption(206, edc->TreeGetDouble("GraphicsOptions.OpenGL.global_transparency"));
  SetDOption(219, edc->TreeGetDouble("GraphicsOptions.OpenGL.material_shininess"));
  SetDOption(220, edc->TreeGetDouble("GraphicsOptions.OpenGL.material_color_intensity"));
  SetIOption(208, edc->TreeGetInt("GraphicsOptions.OpenGL.Light1.enable"));
  SetIOption(210, edc->TreeGetInt("GraphicsOptions.OpenGL.Light1.use_light_position"));
  SetDOption(207, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light1.ambient"));
  SetDOption(208, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light1.diffuse"));
  SetDOption(209, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light1.specular"));
  SetDOption(213, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light1.pos_x"));
  SetDOption(214, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light1.pos_y"));
  SetDOption(215, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light1.pos_z"));
  SetIOption(209, edc->TreeGetInt("GraphicsOptions.OpenGL.Light2.enable"));
  SetIOption(211, edc->TreeGetInt("GraphicsOptions.OpenGL.Light2.use_light_position"));
  SetDOption(210, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light2.ambient"));
  SetDOption(211, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light2.diffuse"));
  SetDOption(212, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light2.specular"));
  SetDOption(216, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light2.pos_x"));
  SetDOption(217, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light2.pos_y"));
  SetDOption(218, edc->TreeGetDouble("GraphicsOptions.OpenGL.Light2.pos_z"));
  SetIOption(254, edc->TreeGetInt("PlotToolOptions.activate"));
  SetIOption(255, edc->TreeGetInt("PlotToolOptions.auto_redraw"));
  SetDOption(255, edc->TreeGetDouble("PlotToolOptions.auto_redraw_interval"));
  SetIOption(257, edc->TreeGetInt("PlotToolOptions.auto_rescale"));
  SetDOption(256, edc->TreeGetDouble("PlotToolOptions.title_size_factor"));
  SetDOption(257, edc->TreeGetDouble("PlotToolOptions.ticks_size_factor"));
  SetIOption(256, edc->TreeGetInt("PlotToolOptions.line_thickness_border"));
  SetDOption(258, edc->TreeGetDouble("PlotToolOptions.line_thickness_factor"));
  SetIOption(259, edc->TreeGetInt("PlotToolOptions.status_bar_info"));
  SetIOption(290, edc->TreeGetInt("PlotToolOptions.DataPoints.flag_draw_every_nth"));
  SetIOption(291, edc->TreeGetInt("PlotToolOptions.DataPoints.draw_every_nth"));
  SetIOption(292, edc->TreeGetInt("PlotToolOptions.DataPoints.flag_mark_every_nth"));
  SetIOption(293, edc->TreeGetInt("PlotToolOptions.DataPoints.mark_every_nth"));
  SetIOption(294, edc->TreeGetInt("PlotToolOptions.DataPoints.vertical_marker"));
  SetIOption(295, edc->TreeGetInt("PlotToolOptions.DataPoints.draw_only_to_time"));
  SetIOption(260, edc->TreeGetInt("PlotToolOptions.View.initial_size_horizontal"));
  SetIOption(261, edc->TreeGetInt("PlotToolOptions.View.initial_size_vertical"));
  SetIOption(262, edc->TreeGetInt("PlotToolOptions.View.plot_horizontal"));
  SetIOption(263, edc->TreeGetInt("PlotToolOptions.View.plot_vertical"));
  SetDOption(260, edc->TreeGetDouble("PlotToolOptions.View.distance_left"));
  SetDOption(261, edc->TreeGetDouble("PlotToolOptions.View.distance_top"));
  SetDOption(262, edc->TreeGetDouble("PlotToolOptions.View.distance_bottom"));
  SetDOption(263, edc->TreeGetDouble("PlotToolOptions.View.distance_right"));
  SetIOption(278, edc->TreeGetInt("PlotToolOptions.Watches.initial_size_horizontal"));
  SetIOption(279, edc->TreeGetInt("PlotToolOptions.Watches.initial_size_vertical"));
  SetIOption(265, edc->TreeGetInt("PlotToolOptions.Axis.draw_at_origin"));
  SetIOption(266, edc->TreeGetInt("PlotToolOptions.Axis.label_major"));
  SetIOption(267, edc->TreeGetInt("PlotToolOptions.Axis.label_minor"));
  SetDOption(265, edc->TreeGetDouble("PlotToolOptions.Axis.overdraw"));
  SetDOption(266, edc->TreeGetDouble("PlotToolOptions.Axis.ticksize"));
  SetIOption(268, edc->TreeGetInt("PlotToolOptions.Axis.minor_ticks_x"));
  SetIOption(269, edc->TreeGetInt("PlotToolOptions.Axis.minor_ticks_y"));
  SetIOption(276, edc->TreeGetInt("PlotToolOptions.Axis.digits_x_labels"));
  SetIOption(277, edc->TreeGetInt("PlotToolOptions.Axis.digits_y_labels"));
  SetIOption(270, edc->TreeGetInt("PlotToolOptions.Grid.linetype_major_x"));
  SetIOption(271, edc->TreeGetInt("PlotToolOptions.Grid.linetype_minor_x"));
  SetIOption(272, edc->TreeGetInt("PlotToolOptions.Grid.linetype_major_y"));
  SetIOption(273, edc->TreeGetInt("PlotToolOptions.Grid.linetype_minor_y"));
  SetIOption(275, edc->TreeGetInt("PlotToolOptions.Legend.show"));
  SetDOption(275, edc->TreeGetDouble("PlotToolOptions.Legend.left"));
  SetDOption(276, edc->TreeGetDouble("PlotToolOptions.Legend.right"));
  SetDOption(277, edc->TreeGetDouble("PlotToolOptions.Legend.top"));
  SetDOption(278, edc->TreeGetDouble("PlotToolOptions.Legend.bottom"));
  SetTOption(125, edc->TreeGetString("PlotToolOptions.SavePicture.filename"));
  SetIOption(280, edc->TreeGetInt("PlotToolOptions.SavePicture.size_horizontal"));
  SetIOption(281, edc->TreeGetInt("PlotToolOptions.SavePicture.size_vertical"));
  SetIOption(282, edc->TreeGetInt("PlotToolOptions.SavePicture.jpg_quality"));
  SetIOption(285, edc->TreeGetInt("PlotToolOptions.SavePicture.store_jpg"));
  SetIOption(286, edc->TreeGetInt("PlotToolOptions.SavePicture.store_png"));
  SetIOption(287, edc->TreeGetInt("PlotToolOptions.SavePicture.store_bmp"));
  SetIOption(288, edc->TreeGetInt("PlotToolOptions.SavePicture.store_emf"));
  SetDOption(230, edc->TreeGetDouble("PreProcOptions.SimulinkModelFormatParser.approx_period_cont2disc"));
  SetDOption(231, edc->TreeGetDouble("PreProcOptions.SimulinkModelFormatParser.DefaultValues.StaticDynamicFricion.zeroZone"));
}
#endif

